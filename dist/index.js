import t from"vanjs-core";class e{initialValues;fields;validator;validationMode;constructor(e){this.initialValues=e.initialValues,this.fields={},this.validator=e.validator??(t=>Promise.resolve(t)),this.validationMode=e.validationMode??"onsubmit";for(const i in e.initialValues)this.fields[i]={value:t.state(e.initialValues[i]),touched:t.state(!1),error:t.state("")}}register(t,e){const s=this.fields[t];if(s){const r=r=>{if(s.value.val=r.target.value,e?.oninput?.(r),"oninput"===this.validationMode){const e={};for(const t in this.fields){const i=this.fields[t];e[t]=i.value.val}this.validator(e).then((e=>{if(e instanceof i){const i=e.errors[t];s.error.val=i??""}else s.error.val=""}))}},o=t=>{s.touched.val=!0,e?.onfocus?.(t)};return{...e,name:t,value:s.value,oninput:r,onfocus:o}}throw new Error(`No field named "${t}"`)}get(t){const e=this.fields[t];if(!e)throw new Error(`No field named "${t}"`);return e.value.val}set(t,e){const i=this.fields[t];if(!i)throw new Error(`No field named "${t}"`);i.value.val=e}error(t){const e=this.fields[t];if(!e)throw new Error(`No field named "${t}"`);return e.error.val}watch(...e){return t.derive((()=>{const t={};if(e.length>0)for(const i of e){const e=this.fields[i];t[i]=e.value.val}else for(const e in this.fields){const i=this.fields[e];t[e]=i.value.val}return t}))}reset(...t){if(t.length>0)for(const e of t){const t=this.fields[e];t.value.val=this.initialValues[e],t.touched.val=!1,t.error.val=""}else for(const t in this.fields){const e=this.fields[t];e.value.val=this.initialValues[t],e.touched.val=!1,e.error.val=""}}handleSubmit(t){return e=>{e.preventDefault();const s={};for(const t in this.fields){const e=this.fields[t];s[t]=e.value.val}this.validator(s).then((e=>{if(e instanceof i)for(const t in this.fields){const i=e.errors[t],s=this.fields[t];s&&(s.error.val=i??"")}else{for(const t in this.fields){this.fields[t].error.val=""}t(e)}}))}}}class i{errors;constructor(t){this.errors=t}}const s=t=>async e=>{try{return await t.validate(e,{abortEarly:!1})}catch(t){const e=t,s={};return e.errors.forEach(((t,i)=>{s[e.inner[i].path]=t})),new i(s)}};export{e as Form,s as yupValidator};
